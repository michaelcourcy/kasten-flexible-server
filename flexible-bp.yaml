apiVersion: cr.kanister.io/v1alpha1
kind: Blueprint
metadata:
  name: flexible-bp
  namespace: kasten-io
actions:
  backup:    
    outputArtifacts:
      pgBackup:
        # Capture the kopia snapshot information for subsequent actions
        # The information includes the kopia snapshot ID which is essential for restore and delete to succeed
        # `kopiaOutput` is the name provided to kando using `--output-name` flag
        kopiaSnapshot: "{{ .Phases.pgDump.Output.kopiaOutput }}"
    phases:
    - func: KubeTask
      name: pgDump
      objects:
        flexibleSecret:
          kind: Secret
          name: flexible-super-admin
          namespace: kasten-io
      args:
        image: ghcr.io/kanisterio/postgres-kanister-tools:0.111.0
        namespace: kasten-io
        command:
        - bash
        - -o
        - errexit
        - -o
        - pipefail
        - -c
        - |
          export PGHOST='ro.poc.postgres.database.azure.com'
          export PGUSER='{{ index .Phases.pgDump.Secrets.flexibleSecret.Data "username" | toString }}'
          export PGPASSWORD='{{ index .Phases.pgDump.Secrets.flexibleSecret.Data "password" | toString }}'
          export PGDATABASE='{{ index .Object.data "dbname" | toString | b64dec }}'
          export PGPORT='5432'
          backup_file_path="backup.sql"
          pg_dump --clean | kando location push --profile '{{ toJson .Profile }}' --path "${backup_file_path}" --output-name "kopiaOutput" -
  restore:    
    inputArtifactNames:
    # The kopia snapshot info created in backup phase can be used here
    # Use the `--kopia-snapshot` flag in kando to pass in `pgBackup.KopiaSnapshot`
    - pgBackup
    phases:
    - func: KubeTask
      name: pgRestore
      objects:
        flexibleSecret:
          kind: Secret
          name: flexible-super-admin
          namespace: kasten-io
      args:
        image: ghcr.io/kanisterio/postgres-kanister-tools:0.111.0
        namespace: kasten-io
        command:
        - bash
        - -o
        - errexit
        - -o
        - pipefail
        - -c
        - |
          export PGHOST='rw.poc.postgres.database.azure.com'
          export PGUSER='{{ index .Phases.pgRestore.Secrets.flexibleSecret.Data "username" | toString }}'
          export PGPASSWORD='{{ index .Phases.pgRestore.Secrets.flexibleSecret.Data "password" | toString }}'
          # maybe the user database does not exist yet if we are installing on a new environment 
          # we must use the default postgres database to have the connection working
          export PGDATABASE='postgres'
          export DATABASE='{{ index .Object.data "dbname" | toString | b64dec }}'
          export DATABASE_USER='{{ index .Object.data "username" | toString | b64dec }}'
          export DATABASE_PASSWORD='{{ index .Object.data "password" | toString | b64dec }}'
          export PGPORT='5432'

          #Make sure the database exists
          db_exists=$(psql -tAc "SELECT 1 FROM pg_database WHERE datname='${DATABASE}'")
          if [ "$db_exists" = "1" ]; then
            echo "Database ${DATABASE} already exists."
          else
            echo "Database ${DATABASE} does not exist, creating it."
            createdb ${DATABASE}
          fi
          # now the database exists we can switch to it 
          export PGDATABASE=$DATABASE
          
          # Restore the database as superuser
          backup_file_path="backup.sql"
          kopia_snap='{{ .ArtifactsIn.pgBackup.KopiaSnapshot }}'
          kando location pull --profile '{{ toJson .Profile }}' --path "${backup_file_path}" --kopia-snapshot "${kopia_snap}" - | psql -q 
          
          # make sure the role exists and has the correct permissions
          role_exists=$(psql -tAc "SELECT 1 FROM pg_roles WHERE rolname='${DATABASE_USER}'")
          if [ "$role_exists" = "1" ]; then
            echo "Role ${DATABASE_USER} already exists."
          else
            echo "Role ${DATABASE_USER} does not exist, creating it."
            psql -c "CREATE ROLE ${DATABASE_USER} WITH LOGIN PASSWORD '${DATABASE_PASSWORD}';"
          fi
          # the grant is idempotent we don't need to check if it's already granted
          psql -c "GRANT ALL PRIVILEGES ON DATABASE ${PGDATABASE} TO ${DATABASE_USER};"
          psql -c "GRANT USAGE ON SCHEMA public TO ${DATABASE_USER};"
          psql -c "GRANT CREATE ON SCHEMA public TO ${DATABASE_USER};"
          psql -c "GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA public TO ${DATABASE_USER};"
          psql -c "GRANT ALL PRIVILEGES ON ALL SEQUENCES IN SCHEMA public TO ${DATABASE_USER};"
  delete:
    inputArtifactNames:
    # The kopia snapshot info created in backup phase can be used here
    # Use the `--kopia-snapshot` flag in kando to pass in `pgBackup.KopiaSnapshot`
      - pgBackup
    phases:
    - func: KubeTask
      name: deleteDump
      args:
        image: ghcr.io/kanisterio/postgres-kanister-tools:0.111.0
        namespace: "{{ .Namespace.Name }}"
        command:
          - bash
          - -o
          - errexit
          - -o
          - pipefail
          - -c
          - |
            backup_file_path="backup.sql"
            kopia_snap='{{ .ArtifactsIn.pgBackup.KopiaSnapshot }}'
            kando location delete --profile '{{ toJson .Profile }}' --path "${backup_file_path}" --kopia-snapshot "${kopia_snap}"